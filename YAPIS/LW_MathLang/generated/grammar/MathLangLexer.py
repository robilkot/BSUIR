# Generated from grammar/MathLang.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,259,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,3,32,197,8,32,1,32,4,32,
        200,8,32,11,32,12,32,201,1,33,1,33,1,33,3,33,207,8,33,1,33,1,33,
        1,33,1,33,3,33,213,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,34,3,34,224,8,34,1,35,1,35,5,35,228,8,35,10,35,12,35,231,9,35,
        1,35,1,35,1,36,1,36,5,36,237,8,36,10,36,12,36,240,9,36,1,37,1,37,
        1,37,1,37,5,37,246,8,37,10,37,12,37,249,9,37,1,37,1,37,1,38,4,38,
        254,8,38,11,38,12,38,255,1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        1,0,6,1,0,48,57,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,2,0,10,10,13,13,3,0,9,10,12,13,32,32,267,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,0,3,83,1,0,0,0,5,
        86,1,0,0,0,7,90,1,0,0,0,9,92,1,0,0,0,11,94,1,0,0,0,13,96,1,0,0,0,
        15,98,1,0,0,0,17,100,1,0,0,0,19,102,1,0,0,0,21,104,1,0,0,0,23,106,
        1,0,0,0,25,108,1,0,0,0,27,110,1,0,0,0,29,112,1,0,0,0,31,114,1,0,
        0,0,33,116,1,0,0,0,35,118,1,0,0,0,37,120,1,0,0,0,39,127,1,0,0,0,
        41,131,1,0,0,0,43,137,1,0,0,0,45,143,1,0,0,0,47,149,1,0,0,0,49,158,
        1,0,0,0,51,165,1,0,0,0,53,168,1,0,0,0,55,173,1,0,0,0,57,177,1,0,
        0,0,59,180,1,0,0,0,61,186,1,0,0,0,63,190,1,0,0,0,65,196,1,0,0,0,
        67,212,1,0,0,0,69,223,1,0,0,0,71,225,1,0,0,0,73,234,1,0,0,0,75,241,
        1,0,0,0,77,253,1,0,0,0,79,80,5,97,0,0,80,81,5,110,0,0,81,82,5,100,
        0,0,82,2,1,0,0,0,83,84,5,111,0,0,84,85,5,114,0,0,85,4,1,0,0,0,86,
        87,5,110,0,0,87,88,5,111,0,0,88,89,5,116,0,0,89,6,1,0,0,0,90,91,
        5,61,0,0,91,8,1,0,0,0,92,93,5,62,0,0,93,10,1,0,0,0,94,95,5,60,0,
        0,95,12,1,0,0,0,96,97,5,44,0,0,97,14,1,0,0,0,98,99,5,59,0,0,99,16,
        1,0,0,0,100,101,5,58,0,0,101,18,1,0,0,0,102,103,5,40,0,0,103,20,
        1,0,0,0,104,105,5,41,0,0,105,22,1,0,0,0,106,107,5,123,0,0,107,24,
        1,0,0,0,108,109,5,125,0,0,109,26,1,0,0,0,110,111,5,47,0,0,111,28,
        1,0,0,0,112,113,5,43,0,0,113,30,1,0,0,0,114,115,5,45,0,0,115,32,
        1,0,0,0,116,117,5,42,0,0,117,34,1,0,0,0,118,119,5,94,0,0,119,36,
        1,0,0,0,120,121,5,103,0,0,121,122,5,108,0,0,122,123,5,111,0,0,123,
        124,5,98,0,0,124,125,5,97,0,0,125,126,5,108,0,0,126,38,1,0,0,0,127,
        128,5,102,0,0,128,129,5,111,0,0,129,130,5,114,0,0,130,40,1,0,0,0,
        131,132,5,119,0,0,132,133,5,104,0,0,133,134,5,105,0,0,134,135,5,
        108,0,0,135,136,5,101,0,0,136,42,1,0,0,0,137,138,5,117,0,0,138,139,
        5,110,0,0,139,140,5,116,0,0,140,141,5,105,0,0,141,142,5,108,0,0,
        142,44,1,0,0,0,143,144,5,98,0,0,144,145,5,114,0,0,145,146,5,101,
        0,0,146,147,5,97,0,0,147,148,5,107,0,0,148,46,1,0,0,0,149,150,5,
        99,0,0,150,151,5,111,0,0,151,152,5,110,0,0,152,153,5,116,0,0,153,
        154,5,105,0,0,154,155,5,110,0,0,155,156,5,117,0,0,156,157,5,101,
        0,0,157,48,1,0,0,0,158,159,5,114,0,0,159,160,5,101,0,0,160,161,5,
        116,0,0,161,162,5,117,0,0,162,163,5,114,0,0,163,164,5,110,0,0,164,
        50,1,0,0,0,165,166,5,105,0,0,166,167,5,102,0,0,167,52,1,0,0,0,168,
        169,5,101,0,0,169,170,5,108,0,0,170,171,5,115,0,0,171,172,5,101,
        0,0,172,54,1,0,0,0,173,174,5,115,0,0,174,175,5,117,0,0,175,176,5,
        98,0,0,176,56,1,0,0,0,177,178,3,27,13,0,178,179,3,27,13,0,179,58,
        1,0,0,0,180,181,5,102,0,0,181,182,5,108,0,0,182,183,5,111,0,0,183,
        184,5,97,0,0,184,185,5,116,0,0,185,60,1,0,0,0,186,187,5,105,0,0,
        187,188,5,110,0,0,188,189,5,116,0,0,189,62,1,0,0,0,190,191,5,98,
        0,0,191,192,5,111,0,0,192,193,5,111,0,0,193,194,5,108,0,0,194,64,
        1,0,0,0,195,197,5,45,0,0,196,195,1,0,0,0,196,197,1,0,0,0,197,199,
        1,0,0,0,198,200,7,0,0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,
        1,0,0,0,201,202,1,0,0,0,202,66,1,0,0,0,203,204,3,65,32,0,204,206,
        5,46,0,0,205,207,3,65,32,0,206,205,1,0,0,0,206,207,1,0,0,0,207,213,
        1,0,0,0,208,209,3,65,32,0,209,210,5,101,0,0,210,211,3,65,32,0,211,
        213,1,0,0,0,212,203,1,0,0,0,212,208,1,0,0,0,213,68,1,0,0,0,214,215,
        5,116,0,0,215,216,5,114,0,0,216,217,5,117,0,0,217,224,5,101,0,0,
        218,219,5,102,0,0,219,220,5,97,0,0,220,221,5,108,0,0,221,222,5,115,
        0,0,222,224,5,101,0,0,223,214,1,0,0,0,223,218,1,0,0,0,224,70,1,0,
        0,0,225,229,5,34,0,0,226,228,8,1,0,0,227,226,1,0,0,0,228,231,1,0,
        0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,
        0,0,232,233,5,34,0,0,233,72,1,0,0,0,234,238,7,2,0,0,235,237,7,3,
        0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,
        0,0,239,74,1,0,0,0,240,238,1,0,0,0,241,242,5,47,0,0,242,243,5,47,
        0,0,243,247,1,0,0,0,244,246,8,4,0,0,245,244,1,0,0,0,246,249,1,0,
        0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,
        0,0,250,251,6,37,0,0,251,76,1,0,0,0,252,254,7,5,0,0,253,252,1,0,
        0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,257,1,0,
        0,0,257,258,6,38,1,0,258,78,1,0,0,0,10,0,196,201,206,212,223,229,
        238,247,255,2,0,1,0,6,0,0
    ]

class MathLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    AND = 1
    OR = 2
    NOT = 3
    EQ = 4
    GT = 5
    LS = 6
    COMMA = 7
    SEMI = 8
    COLON = 9
    LPAREN = 10
    RPAREN = 11
    LCURLY = 12
    RCURLY = 13
    SLASH = 14
    PLUS = 15
    MINUS = 16
    ASTERISK = 17
    CARET = 18
    GLOBAL = 19
    FOR = 20
    WHILE = 21
    UNTIL = 22
    BREAK = 23
    CONTINUE = 24
    RETURN = 25
    IF = 26
    ELSE = 27
    SUB = 28
    DSLASH = 29
    FLOAT_T = 30
    INT_T = 31
    BOOL_T = 32
    INT = 33
    FLOAT = 34
    BOOL = 35
    STRING = 36
    ID = 37
    LINE_COMMENT = 38
    WS = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'and'", "'or'", "'not'", "'='", "'>'", "'<'", "','", "';'", 
            "':'", "'('", "')'", "'{'", "'}'", "'/'", "'+'", "'-'", "'*'", 
            "'^'", "'global'", "'for'", "'while'", "'until'", "'break'", 
            "'continue'", "'return'", "'if'", "'else'", "'sub'", "'float'", 
            "'int'", "'bool'" ]

    symbolicNames = [ "<INVALID>",
            "AND", "OR", "NOT", "EQ", "GT", "LS", "COMMA", "SEMI", "COLON", 
            "LPAREN", "RPAREN", "LCURLY", "RCURLY", "SLASH", "PLUS", "MINUS", 
            "ASTERISK", "CARET", "GLOBAL", "FOR", "WHILE", "UNTIL", "BREAK", 
            "CONTINUE", "RETURN", "IF", "ELSE", "SUB", "DSLASH", "FLOAT_T", 
            "INT_T", "BOOL_T", "INT", "FLOAT", "BOOL", "STRING", "ID", "LINE_COMMENT", 
            "WS" ]

    ruleNames = [ "AND", "OR", "NOT", "EQ", "GT", "LS", "COMMA", "SEMI", 
                  "COLON", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "SLASH", 
                  "PLUS", "MINUS", "ASTERISK", "CARET", "GLOBAL", "FOR", 
                  "WHILE", "UNTIL", "BREAK", "CONTINUE", "RETURN", "IF", 
                  "ELSE", "SUB", "DSLASH", "FLOAT_T", "INT_T", "BOOL_T", 
                  "INT", "FLOAT", "BOOL", "STRING", "ID", "LINE_COMMENT", 
                  "WS" ]

    grammarFileName = "MathLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


